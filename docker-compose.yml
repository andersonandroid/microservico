version: '3.8'

services:
  # --- Infraestrutura ---
  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  auth_db:
    image: postgres:14-alpine
    hostname: auth_db
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  catalog_db:
    image: postgres:14-alpine
    hostname: catalog_db
    environment:
      POSTGRES_USER: ${CATALOG_DB_USER}
      POSTGRES_PASSWORD: ${CATALOG_DB_PASSWORD}
      POSTGRES_DB: ${CATALOG_DB_NAME}
    volumes:
      - catalog_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CATALOG_DB_USER} -d ${CATALOG_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:6-alpine
    hostname: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  # --- Microsserviços ---
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    hostname: auth_service
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    environment:
      AUTH_DB_HOST: ${AUTH_DB_HOST}
      AUTH_DB_PORT: ${AUTH_DB_PORT}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      AUTH_DB_NAME: ${AUTH_DB_NAME}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth_db:
        condition: service_healthy
    networks:
      - app_network

  catalog-service:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    hostname: catalog_service
    ports:
      - "${CATALOG_SERVICE_PORT}:${CATALOG_SERVICE_PORT}"
    environment:
      CATALOG_DB_HOST: ${CATALOG_DB_HOST}
      CATALOG_DB_PORT: ${CATALOG_DB_PORT}
      CATALOG_DB_USER: ${CATALOG_DB_USER}
      CATALOG_DB_PASSWORD: ${CATALOG_DB_PASSWORD}
      CATALOG_DB_NAME: ${CATALOG_DB_NAME}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      CATALOG_SERVICE_PORT: ${CATALOG_SERVICE_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      catalog_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  processing-service: # NOVO SERVIÇO
    build:
      context: ./services/processing-service
      dockerfile: Dockerfile
    hostname: processing_service
    ports:
      - "${PROCESSING_SERVICE_PORT}:${PROCESSING_SERVICE_PORT}"
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      PROCESSING_SERVICE_PORT: ${PROCESSING_SERVICE_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network

  api-gateway:
    image: nginx:latest
    hostname: api_gateway
    ports:
      - "${API_GATEWAY_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      auth-service:
        condition: service_started
      catalog-service:
        condition: service_started
      processing-service: # Adicione dependência do novo serviço
        condition: service_started
    networks:
      - app_network

# --- Volumes para persistência de dados ---
volumes:
  rabbitmq_data:
  auth_db_data:
  catalog_db_data:
  redis_data:

# --- Rede para comunicação entre os serviços ---
networks:
  app_network:
    driver: bridge
